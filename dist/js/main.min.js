"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){if(e){if("string"==typeof e)return _arrayLikeToArray(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(t="Object"===t&&e.constructor?e.constructor.name:t)||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,a=new Array(r);t<r;t++)a[t]=e[t];return a}!function(){function e(){var e=new Date(l.getAttribute("data-count")).getTime()-(new Date).getTime(),r=Math.floor(e/6048e5),t=Math.floor(e/864e5),a=Math.floor(e%864e5/36e5),o=Math.floor(e%36e5/6e4),e=Math.floor(e%6e4/1e3),n=(new Date(l.getAttribute("data-count")).getTime(),(new Date).getTime(),(n=l.getAttribute("data-template")).replace("%w",r).replace("%d",t).replace("%h",a).replace("%m",o).replace("%s",e));l.innerHTML=n}var l=function(e){var r=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return e=e.trim(),r?_toConsumableArray(document.querySelectorAll(e)):document.querySelector(e)}(".countdown");e(),setInterval(e,1e3)}();var footerYear=document.querySelector(".footer-year"),handleCurrentYear=function(){var e=(new Date).getFullYear();footerYear.innerText=e};handleCurrentYear();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiYWxsIiwiZWwiLCJ0aW1lbGVmdCIsIkRhdGUiLCJjb3VudGRvd24iLCJnZXRBdHRyaWJ1dGUiLCJnZXRUaW1lIiwiTWF0aCIsImZsb29yIiwiZGF5cyIsImRvY3VtZW50IiwiaG91cnMiLCJtaW51dGVzIiwicXVlcnlTZWxlY3RvciIsInNlY29uZHMiLCJvdXRwdXQiLCJyZXBsYWNlIiwid2Vla3MiLCJpbm5lckhUTUwiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ0cmltIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsInNlbGVjdCIsImNvdW50RG93bkRhdGUiLCJzZXRJbnRlcnZhbCIsImZvb3RlclllYXIiLCJpbm5lclRleHQiLCJ5ZWFyIiwiaGFuZGxlQ3VycmVudFllYXIiXSwibWFwcGluZ3MiOiJnL0JBUUEsV0FNc0MsU0FBaEJBLElBQ2xCQyxJQUFFQyxFQUFGLElBQUFDLEtBQUFDLEVBQUFDLGFBQUEsZUFBQUMsV0FBQSxJQUFBSCxNQUFBRyxVQUNJTixFQUFLTyxLQUFBQyxNQUFBTixFQUFBLFFBQ1BPLEVBQUFGLEtBQUFDLE1BQUFOLEVBQVdRLE9BRGJDLEVBRU9KLEtBQUFDLE1BQUFOLEVBQUEsTUFBQSxNQUNMVSxFQUFPRixLQUFTRyxNQUFBQSxFQUFULEtBQVNBLEtBQ2pCQyxFQUFBUCxLQUFBQyxNQUFBTixFQUFBLElBQUEsS0F3RERhLEdBckRGLElBQUFaLEtBQUFDLEVBQUFDLGFBQUEsZUFBQUMsV0FDRixJQUFBSCxNQUFBRyxXQW9ESVMsRUFGQVgsRUFBQUMsYUFBQSxrQkFFQVcsUUFBQSxLQUFBQyxHQUFBRCxRQUFBLEtBQUFQLEdBQUFPLFFBQUEsS0FBQUwsR0FBQUssUUFBQSxLQUFBSixHQUFBSSxRQUFBLEtBQUFGLElBQ0FWLEVBQUFjLFVBQUFILEVBN0VKLElBMkJNWCxFQTNCTixTQUFBSCxHQUFBLElBQUFELEVBQUEsRUFBQW1CLFVBQUFDLGFBQUFDLElBQUFGLFVBQUEsSUFBQUEsVUFBQSxHQUVBLE9BYUlsQixFQUFLQSxFQUFHcUIsT0FiWnRCLEVBQ0F1QixtQkFBQWIsU0FBQWMsaUJBQUF2QixJQUVBUyxTQUFBRyxjQUFBWixHQXNCa0J3QixDQUFPLGNBNER2QkMsSUFDQUMsWUFSRUQsRUFBQSxLQXhFSixHQXNGQSxJQWpFRUUsV0FBQWxCLFNBQUFHLGNBQUEsZ0JBMERBYSxrQkFBYSxXQUNiQyxJQUFBQSxHQUFZRCxJQUFBQSxNQUFBQSxjQWhGZEUsV0FvRkFDLFVBQUFDLEdBRUFDIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ09VTlRFUlxyXG5cclxuLyoqXHJcbiogVGVtcGxhdGUgTmFtZTogV2VCdWlsZCAtIHY0LjYuMVxyXG4qIFRlbXBsYXRlIFVSTDogaHR0cHM6Ly9ib290c3RyYXBtYWRlLmNvbS9mcmVlLWJvb3RzdHJhcC1jb21pbmctc29vbi10ZW1wbGF0ZS1jb3VudGR3b24vXHJcbiogQXV0aG9yOiBCb290c3RyYXBNYWRlLmNvbVxyXG4qIExpY2Vuc2U6IGh0dHBzOi8vYm9vdHN0cmFwbWFkZS5jb20vbGljZW5zZS9cclxuKi9cclxuKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAvKipcclxuICAgKiBFYXN5IHNlbGVjdG9yIGhlbHBlciBmdW5jdGlvblxyXG4gICAqL1xyXG4gIGNvbnN0IHNlbGVjdCA9IChlbCwgYWxsID0gZmFsc2UpID0+IHtcclxuICAgIGVsID0gZWwudHJpbSgpXHJcbiAgICBpZiAoYWxsKSB7XHJcbiAgICAgIHJldHVybiBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbCldXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvdW50ZG93biB0aW1lclxyXG4gICAqL1xyXG5cclxuICBsZXQgY291bnRkb3duID0gc2VsZWN0KCcuY291bnRkb3duJyk7XHJcblxyXG4gIGNvbnN0IGNvdW50RG93bkRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgIGxldCB0aW1lbGVmdCA9IG5ldyBEYXRlKGNvdW50ZG93bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY291bnQnKSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgbGV0IHdlZWtzID0gTWF0aC5mbG9vcih0aW1lbGVmdCAvICgxMDAwICogNjAgKiA2MCAqIDI0ICogNykpO1xyXG4gICAgbGV0IGRheXMgPSBNYXRoLmZsb29yKHRpbWVsZWZ0IC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcclxuICAgIGxldCBob3VycyA9IE1hdGguZmxvb3IoKHRpbWVsZWZ0ICUgKDEwMDAgKiA2MCAqIDYwICogMjQpKSAvICgxMDAwICogNjAgKiA2MCkpO1xyXG4gICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0aW1lbGVmdCAlICgxMDAwICogNjAgKiA2MCkpIC8gKDEwMDAgKiA2MCkpO1xyXG4gICAgbGV0IHNlY29uZHMgPSBNYXRoLmZsb29yKCh0aW1lbGVmdCAlICgxMDAwICogNjApKSAvIDEwMDApO1xyXG4gICAgXHJcbiAgICBsZXQgdGltZU9mV2VkZGluZyA9IG5ldyBEYXRlKGNvdW50ZG93bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY291bnQnKSkuZ2V0VGltZSgpO1xyXG4gICAgbGV0IGFjdHVhbFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgICAvLyBsZXQgZGF5c05hbWU7XHJcbiAgICAvLyBsZXQgaG91cnNOYW1lO1xyXG4gICAgLy8gbGV0IHNlY29uZHNOYW1lO1xyXG5cclxuICAgIC8vIGlmKGRheXMgPT09IDEpe1xyXG4gICAgLy8gICBkYXlzTmFtZSA9IFwiZHppZcWEXCJcclxuICAgIC8vIH1cclxuICAgIC8vIGVsc2V7XHJcbiAgICAvLyAgIGRheXNOYW1lID0gXCJkbmlcIlxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGlmKGhvdXJzID09PSAxKXtcclxuICAgIC8vICAgaG91cnNOYW1lID0gXCJnb2R6aW5hXCJcclxuICAgIC8vIH1cclxuICAgIC8vIGVsc2UgaWYoaG91cnMgPT09IDIgfHwgaG91cnMgPT09IDMgfHwgaG91cnMgPT09IDQpe1xyXG4gICAgLy8gICBob3Vyc05hbWUgPSBcImdvZHppbnlcIlxyXG4gICAgLy8gfVxyXG4gICAgLy8gZWxzZXtcclxuICAgIC8vICAgaG91cnNOYW1lID0gXCJnb2R6aW5cIlxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGlmKG1pbnV0ZXMgPT09IDEpe1xyXG4gICAgLy8gICBtaW51dGVzTmFtZSA9IFwibWludXRhXCJcclxuICAgIC8vIH1cclxuICAgIC8vIGVsc2UgaWYoaG91cnMgPT09IDIgfHwgaG91cnMgPT09IDMgfHwgaG91cnMgPT09IDQpe1xyXG4gICAgLy8gICBtaW51dGVzTmFtZSA9IFwiZ29kemlueVwiXHJcbiAgICAvLyB9XHJcbiAgICAvLyBlbHNle1xyXG4gICAgLy8gICBtaW51dGVzTmFtZSA9IFwiZ29kemluXCJcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBpZihzZWNvbmRzID09PSAxKXtcclxuICAgIC8vICAgc2Vjb25kc05hbWUgPSBcInNla3VuZGFcIlxyXG4gICAgLy8gfVxyXG4gICAgLy8gZWxzZSBpZihzZWNvbmRzID09PSAyIHx8IHNlY29uZHMgPT09IDMgfHwgc2Vjb25kcyA9PT0gNCl7XHJcbiAgICAvLyAgIHNlY29uZHNOYW1lID09IFwic2VrdW5keVwiXHJcbiAgICAvLyB9XHJcbiAgICAvLyBlbHNle1xyXG4gICAgLy8gICBzZWNvbmRzTmFtZSA9IFwic2VrdW5kXCJcclxuICAgIC8vIH1cclxuXHJcbiAgICBsZXQgb3V0cHV0ID0gY291bnRkb3duLmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpO1xyXG4gICAgLy8gbGV0IG91dHB1dCA9IGAlZCAke2RheXNOYW1lfSAlaCAke2hvdXJzTmFtZX0gJW0gJHttaW51dGVzTmFtZX0gJXMgJHtzZWNvbmRzTmFtZX1gO1xyXG4gICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoJyV3Jywgd2Vla3MpLnJlcGxhY2UoJyVkJywgZGF5cykucmVwbGFjZSgnJWgnLCBob3VycykucmVwbGFjZSgnJW0nLCBtaW51dGVzKS5yZXBsYWNlKCclcycsIHNlY29uZHMpO1xyXG4gICAgY291bnRkb3duLmlubmVySFRNTCA9IG91dHB1dDtcclxuICB9XHJcbiAgY291bnREb3duRGF0ZSgpO1xyXG4gIHNldEludGVydmFsKGNvdW50RG93bkRhdGUsIDEwMDApO1xyXG5cclxufSkoKVxyXG5cclxuLy8gRk9PVEVSIFlFQVJcclxuXHJcbmNvbnN0IGZvb3RlclllYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9vdGVyLXllYXInKVxyXG5cclxuY29uc3QgaGFuZGxlQ3VycmVudFllYXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgeWVhciA9IChuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKTtcclxuICBmb290ZXJZZWFyLmlubmVyVGV4dCA9IHllYXI7XHJcbn1cclxuXHJcbmhhbmRsZUN1cnJlbnRZZWFyKCk7Il19
