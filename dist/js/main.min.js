"use strict";function _toConsumableArray(r){return _arrayWithoutHoles(r)||_iterableToArray(r)||_unsupportedIterableToArray(r)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,e){if(r){if("string"==typeof r)return _arrayLikeToArray(r,e);var t=Object.prototype.toString.call(r).slice(8,-1);return"Map"===(t="Object"===t&&r.constructor?r.constructor.name:t)||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(r,e):void 0}}function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}function _arrayWithoutHoles(r){if(Array.isArray(r))return _arrayLikeToArray(r)}function _arrayLikeToArray(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,a=new Array(e);t<e;t++)a[t]=r[t];return a}!function(){function r(){var r=new Date(i.getAttribute("data-count")).getTime()-(new Date).getTime(),e=Math.floor(r/6048e5),t=Math.floor(r/864e5),a=Math.floor(r%864e5/36e5),o=Math.floor(r%36e5/6e4),r=Math.floor(r%6e4/1e3),n=(new Date(i.getAttribute("data-count")).getTime(),(new Date).getTime(),(n=i.getAttribute("data-template")).replace("%w",e).replace("%d",t).replace("%h",a).replace("%m",o).replace("%s",r));i.innerHTML=n}var i=function(r){var e=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return r=r.trim(),e?_toConsumableArray(document.querySelectorAll(r)):document.querySelector(r)}(".countdown");r(),setInterval(r,1e3)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiYWxsIiwiZWwiLCJEYXRlIiwiY291bnRkb3duIiwiZ2V0QXR0cmlidXRlIiwiZ2V0VGltZSIsIk1hdGgiLCJmbG9vciIsInRpbWVsZWZ0IiwiZGF5cyIsImRvY3VtZW50IiwiaG91cnMiLCJtaW51dGVzIiwicXVlcnlTZWxlY3RvciIsInNlY29uZHMiLCJvdXRwdXQiLCJyZXBsYWNlIiwid2Vla3MiLCJpbm5lckhUTUwiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ0cmltIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsInNlbGVjdCIsImNvdW50RG93bkRhdGUiLCJzZXRJbnRlcnZhbCJdLCJtYXBwaW5ncyI6ImcvQkFNQSxXQU13QyxTQUFoQkEsSUFDaEIsSUFBR0MsRUFBTCxJQUFBQyxLQUFBQyxFQUFBQyxhQUFBLGVBQUFDLFdBQUEsSUFBQUgsTUFBQUcsVUFDSUwsRUFBS00sS0FBQUMsTUFBQUMsRUFBQSxRQUNQQyxFQUFBSCxLQUFBQyxNQUFBQyxFQUFXRSxPQURiQyxFQUVPTCxLQUFBQyxNQUFBQyxFQUFBLE1BQUEsTUFDTEksRUFBT0YsS0FBU0csTUFBQUEsRUFBaEIsS0FBZ0JBLEtBQ2pCQyxFQUFBUixLQUFBQyxNQUFBQyxFQUFBLElBQUEsS0F3RERPLEdBckRGLElBQUFiLEtBQUFDLEVBQUFDLGFBQUEsZUFBQUMsV0FDSixJQUFBSCxNQUFBRyxXQW9ETVUsRUFGQVosRUFBQUMsYUFBQSxrQkFFQVksUUFBQSxLQUFBQyxHQUFBRCxRQUFBLEtBQUFQLEdBQUFPLFFBQUEsS0FBQUwsR0FBQUssUUFBQSxLQUFBSixHQUFBSSxRQUFBLEtBQUFGLElBQ0FYLEVBQUFlLFVBQUFILEVBL0RGLElBYUlaLEVBYlcsU0FBQ0YsR0FBb0IsSUFBaEJELEVBQWdCLEVBQUFtQixVQUFBQyxhQUFBQyxJQUFBRixVQUFBLElBQUFBLFVBQUEsR0FaeEMsT0FhTWxCLEVBQUtBLEVBQUdxQixPQWJkdEIsRUFDQXVCLG1CQUFBYixTQUFBYyxpQkFBQXZCLElBRUFTLFNBQUFHLGNBQUFaLEdBc0JvQndCLENBQU8sY0FvRHJCQyxJQUNBQyxZQUFBRCxFQUFBLEtBeEVOIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiogVGVtcGxhdGUgTmFtZTogV2VCdWlsZCAtIHY0LjYuMVxyXG4qIFRlbXBsYXRlIFVSTDogaHR0cHM6Ly9ib290c3RyYXBtYWRlLmNvbS9mcmVlLWJvb3RzdHJhcC1jb21pbmctc29vbi10ZW1wbGF0ZS1jb3VudGR3b24vXHJcbiogQXV0aG9yOiBCb290c3RyYXBNYWRlLmNvbVxyXG4qIExpY2Vuc2U6IGh0dHBzOi8vYm9vdHN0cmFwbWFkZS5jb20vbGljZW5zZS9cclxuKi9cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgXHJcbiAgICAvKipcclxuICAgICAqIEVhc3kgc2VsZWN0b3IgaGVscGVyIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHNlbGVjdCA9IChlbCwgYWxsID0gZmFsc2UpID0+IHtcclxuICAgICAgZWwgPSBlbC50cmltKClcclxuICAgICAgaWYgKGFsbCkge1xyXG4gICAgICAgIHJldHVybiBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbCldXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICBcclxuICAgIC8qKlxyXG4gICAgICogQ291bnRkb3duIHRpbWVyXHJcbiAgICAgKi9cclxuICBcclxuICAgIGxldCBjb3VudGRvd24gPSBzZWxlY3QoJy5jb3VudGRvd24nKTtcclxuICBcclxuICAgIGNvbnN0IGNvdW50RG93bkRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgbGV0IHRpbWVsZWZ0ID0gbmV3IERhdGUoY291bnRkb3duLmdldEF0dHJpYnV0ZSgnZGF0YS1jb3VudCcpKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICBcclxuICAgICAgbGV0IHdlZWtzID0gTWF0aC5mbG9vcih0aW1lbGVmdCAvICgxMDAwICogNjAgKiA2MCAqIDI0ICogNykpO1xyXG4gICAgICBsZXQgZGF5cyA9IE1hdGguZmxvb3IodGltZWxlZnQgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xyXG4gICAgICBsZXQgaG91cnMgPSBNYXRoLmZsb29yKCh0aW1lbGVmdCAlICgxMDAwICogNjAgKiA2MCAqIDI0KSkgLyAoMTAwMCAqIDYwICogNjApKTtcclxuICAgICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0aW1lbGVmdCAlICgxMDAwICogNjAgKiA2MCkpIC8gKDEwMDAgKiA2MCkpO1xyXG4gICAgICBsZXQgc2Vjb25kcyA9IE1hdGguZmxvb3IoKHRpbWVsZWZ0ICUgKDEwMDAgKiA2MCkpIC8gMTAwMCk7XHJcbiAgICAgIFxyXG4gICAgICBsZXQgdGltZU9mV2VkZGluZyA9IG5ldyBEYXRlKGNvdW50ZG93bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY291bnQnKSkuZ2V0VGltZSgpO1xyXG4gICAgICBsZXQgYWN0dWFsVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cclxuICAgICAgLy8gbGV0IGRheXNOYW1lO1xyXG4gICAgICAvLyBsZXQgaG91cnNOYW1lO1xyXG4gICAgICAvLyBsZXQgc2Vjb25kc05hbWU7XHJcblxyXG4gICAgICAvLyBpZihkYXlzID09PSAxKXtcclxuICAgICAgLy8gICBkYXlzTmFtZSA9IFwiZHppZcWEXCJcclxuICAgICAgLy8gfVxyXG4gICAgICAvLyBlbHNle1xyXG4gICAgICAvLyAgIGRheXNOYW1lID0gXCJkbmlcIlxyXG4gICAgICAvLyB9XHJcblxyXG4gICAgICAvLyBpZihob3VycyA9PT0gMSl7XHJcbiAgICAgIC8vICAgaG91cnNOYW1lID0gXCJnb2R6aW5hXCJcclxuICAgICAgLy8gfVxyXG4gICAgICAvLyBlbHNlIGlmKGhvdXJzID09PSAyIHx8IGhvdXJzID09PSAzIHx8IGhvdXJzID09PSA0KXtcclxuICAgICAgLy8gICBob3Vyc05hbWUgPSBcImdvZHppbnlcIlxyXG4gICAgICAvLyB9XHJcbiAgICAgIC8vIGVsc2V7XHJcbiAgICAgIC8vICAgaG91cnNOYW1lID0gXCJnb2R6aW5cIlxyXG4gICAgICAvLyB9XHJcblxyXG4gICAgICAvLyBpZihtaW51dGVzID09PSAxKXtcclxuICAgICAgLy8gICBtaW51dGVzTmFtZSA9IFwibWludXRhXCJcclxuICAgICAgLy8gfVxyXG4gICAgICAvLyBlbHNlIGlmKGhvdXJzID09PSAyIHx8IGhvdXJzID09PSAzIHx8IGhvdXJzID09PSA0KXtcclxuICAgICAgLy8gICBtaW51dGVzTmFtZSA9IFwiZ29kemlueVwiXHJcbiAgICAgIC8vIH1cclxuICAgICAgLy8gZWxzZXtcclxuICAgICAgLy8gICBtaW51dGVzTmFtZSA9IFwiZ29kemluXCJcclxuICAgICAgLy8gfVxyXG5cclxuICAgICAgLy8gaWYoc2Vjb25kcyA9PT0gMSl7XHJcbiAgICAgIC8vICAgc2Vjb25kc05hbWUgPSBcInNla3VuZGFcIlxyXG4gICAgICAvLyB9XHJcbiAgICAgIC8vIGVsc2UgaWYoc2Vjb25kcyA9PT0gMiB8fCBzZWNvbmRzID09PSAzIHx8IHNlY29uZHMgPT09IDQpe1xyXG4gICAgICAvLyAgIHNlY29uZHNOYW1lID09IFwic2VrdW5keVwiXHJcbiAgICAgIC8vIH1cclxuICAgICAgLy8gZWxzZXtcclxuICAgICAgLy8gICBzZWNvbmRzTmFtZSA9IFwic2VrdW5kXCJcclxuICAgICAgLy8gfVxyXG5cclxuICAgICAgbGV0IG91dHB1dCA9IGNvdW50ZG93bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnKTtcclxuICAgICAgLy8gbGV0IG91dHB1dCA9IGAlZCAke2RheXNOYW1lfSAlaCAke2hvdXJzTmFtZX0gJW0gJHttaW51dGVzTmFtZX0gJXMgJHtzZWNvbmRzTmFtZX1gO1xyXG4gICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgnJXcnLCB3ZWVrcykucmVwbGFjZSgnJWQnLCBkYXlzKS5yZXBsYWNlKCclaCcsIGhvdXJzKS5yZXBsYWNlKCclbScsIG1pbnV0ZXMpLnJlcGxhY2UoJyVzJywgc2Vjb25kcyk7XHJcbiAgICAgIGNvdW50ZG93bi5pbm5lckhUTUwgPSBvdXRwdXQ7XHJcbiAgICB9XHJcbiAgICBjb3VudERvd25EYXRlKCk7XHJcbiAgICBzZXRJbnRlcnZhbChjb3VudERvd25EYXRlLCAxMDAwKTtcclxuICBcclxuICB9KSgpIl19
