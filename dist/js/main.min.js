"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){if(e){if("string"==typeof e)return _arrayLikeToArray(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(t="Object"===t&&e.constructor?e.constructor.name:t)||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,a=new Array(r);t<r;t++)a[t]=e[t];return a}!function(){function e(){var e=new Date(l.getAttribute("data-count")).getTime()-(new Date).getTime(),r=Math.floor(e/6048e5),t=Math.floor(e/864e5),a=Math.floor(e%864e5/36e5),o=Math.floor(e%36e5/6e4),e=Math.floor(e%6e4/1e3),n=(new Date(l.getAttribute("data-count")).getTime(),(new Date).getTime(),(n=l.getAttribute("data-template")).replace("%w",r).replace("%d",t).replace("%h",a).replace("%m",o).replace("%s",e));l.innerHTML=n}var l=function(e){var r=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return e=e.trim(),r?_toConsumableArray(document.querySelectorAll(e)):document.querySelector(e)}(".countdown");e(),setInterval(e,1e3)}();var footerYear=document.querySelector(".footer__year"),handleCurrentYear=function(){var e=(new Date).getFullYear();footerYear.innerText=e};handleCurrentYear();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiYWxsIiwiZWwiLCJ0aW1lbGVmdCIsIkRhdGUiLCJjb3VudGRvd24iLCJnZXRBdHRyaWJ1dGUiLCJnZXRUaW1lIiwiTWF0aCIsImZsb29yIiwiZGF5cyIsImRvY3VtZW50IiwiaG91cnMiLCJtaW51dGVzIiwicXVlcnlTZWxlY3RvciIsInNlY29uZHMiLCJvdXRwdXQiLCJzZWxlY3QiLCJ3ZWVrcyIsInJlcGxhY2UiLCJpbm5lckhUTUwiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ0cmltIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwicXVlcnlTZWxlY3RvckFsbCIsImNvdW50RG93bkRhdGUiLCJzZXRJbnRlcnZhbCIsImZvb3RlclllYXIiLCJoYW5kbGVDdXJyZW50WWVhciIsImlubmVyVGV4dCIsInllYXIiXSwibWFwcGluZ3MiOiJnL0JBUUEsV0FNc0MsU0FBaEJBLElBQ2xCQyxJQUFFQyxFQUFGLElBQUFDLEtBQUFDLEVBQUFDLGFBQUEsZUFBQUMsV0FBQSxJQUFBSCxNQUFBRyxVQUNJTixFQUFLTyxLQUFBQyxNQUFBTixFQUFBLFFBQ1BPLEVBQUFGLEtBQUFDLE1BQUFOLEVBQVdRLE9BRGJDLEVBRU9KLEtBQUFDLE1BQUFOLEVBQUEsTUFBQSxNQUNMVSxFQUFPRixLQUFTRyxNQUFBQSxFQUFULEtBQVNBLEtBQ2pCQyxFQUFBUCxLQUFBQyxNQUFBTixFQUFBLElBQUEsS0FPSGEsR0FKQSxJQUFBWixLQUFBQyxFQUFBQyxhQUFBLGVBQUFDLFdBQ0YsSUFBQUgsTUFBQUcsV0FHTUYsRUFjV0EsRUFBVUMsYUFBYSxrQkFkdEJXLFFBQU8sS0FBQUMsR0FBdkJDLFFBQUEsS0FBQVQsR0FBQVMsUUFBQSxLQUFBUCxHQUFBTyxRQUFBLEtBQUFOLEdBQUFNLFFBQUEsS0FBQUosSUFpQkVWLEVBQVVlLFVBQVlKLEVBNUMxQixJQTJCTVgsRUEzQk4sU0FBQUgsR0FBQSxJQUFBRCxFQUFBLEVBQUFvQixVQUFBQyxhQUFBQyxJQUFBRixVQUFBLElBQUFBLFVBQUEsR0FFQSxPQWFJbkIsRUFBS0EsRUFBR3NCLE9BYlp2QixFQUNBd0IsbUJBQUFkLFNBQUFlLGlCQUFBeEIsSUFFQVMsU0FBQUcsY0FBQVosR0FzQmtCZSxDQUFPLGNBbUJ2QlUsSUFDQUMsWUFmV0QsRUFBY3hCLEtBeEIzQixHQTZDQSxJQWRJMEIsV0FBY2xCLFNBQU9QLGNBQXJCLGlCQWdCRTBCLGtCQUFvQixXQUN4QixJQWJFZCxHQUFTQSxJQUFPRyxNQUFBQSxjQWNsQlUsV0FiV0UsVUFBVEMsR0FnQkpGIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ09VTlRFUlxuXG4vKipcbiogVGVtcGxhdGUgTmFtZTogV2VCdWlsZCAtIHY0LjYuMVxuKiBUZW1wbGF0ZSBVUkw6IGh0dHBzOi8vYm9vdHN0cmFwbWFkZS5jb20vZnJlZS1ib290c3RyYXAtY29taW5nLXNvb24tdGVtcGxhdGUtY291bnRkd29uL1xuKiBBdXRob3I6IEJvb3RzdHJhcE1hZGUuY29tXG4qIExpY2Vuc2U6IGh0dHBzOi8vYm9vdHN0cmFwbWFkZS5jb20vbGljZW5zZS9cbiovXG4oZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8qKlxuICAgKiBFYXN5IHNlbGVjdG9yIGhlbHBlciBmdW5jdGlvblxuICAgKi9cbiAgY29uc3Qgc2VsZWN0ID0gKGVsLCBhbGwgPSBmYWxzZSkgPT4ge1xuICAgIGVsID0gZWwudHJpbSgpXG4gICAgaWYgKGFsbCkge1xuICAgICAgcmV0dXJuIFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvdW50ZG93biB0aW1lclxuICAgKi9cblxuICBsZXQgY291bnRkb3duID0gc2VsZWN0KCcuY291bnRkb3duJyk7XG5cbiAgY29uc3QgY291bnREb3duRGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCB0aW1lbGVmdCA9IG5ldyBEYXRlKGNvdW50ZG93bi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY291bnQnKSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBsZXQgd2Vla3MgPSBNYXRoLmZsb29yKHRpbWVsZWZ0IC8gKDEwMDAgKiA2MCAqIDYwICogMjQgKiA3KSk7XG4gICAgbGV0IGRheXMgPSBNYXRoLmZsb29yKHRpbWVsZWZ0IC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbiAgICBsZXQgaG91cnMgPSBNYXRoLmZsb29yKCh0aW1lbGVmdCAlICgxMDAwICogNjAgKiA2MCAqIDI0KSkgLyAoMTAwMCAqIDYwICogNjApKTtcbiAgICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoKHRpbWVsZWZ0ICUgKDEwMDAgKiA2MCAqIDYwKSkgLyAoMTAwMCAqIDYwKSk7XG4gICAgbGV0IHNlY29uZHMgPSBNYXRoLmZsb29yKCh0aW1lbGVmdCAlICgxMDAwICogNjApKSAvIDEwMDApO1xuICAgIFxuICAgIGxldCB0aW1lT2ZXZWRkaW5nID0gbmV3IERhdGUoY291bnRkb3duLmdldEF0dHJpYnV0ZSgnZGF0YS1jb3VudCcpKS5nZXRUaW1lKCk7XG4gICAgbGV0IGFjdHVhbFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIGxldCBvdXRwdXQgPSBjb3VudGRvd24uZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJyk7XG4gICAgLy8gbGV0IG91dHB1dCA9IGAlZCAke2RheXNOYW1lfSAlaCAke2hvdXJzTmFtZX0gJW0gJHttaW51dGVzTmFtZX0gJXMgJHtzZWNvbmRzTmFtZX1gO1xuICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKCcldycsIHdlZWtzKS5yZXBsYWNlKCclZCcsIGRheXMpLnJlcGxhY2UoJyVoJywgaG91cnMpLnJlcGxhY2UoJyVtJywgbWludXRlcykucmVwbGFjZSgnJXMnLCBzZWNvbmRzKTtcbiAgICBjb3VudGRvd24uaW5uZXJIVE1MID0gb3V0cHV0O1xuICB9XG4gIGNvdW50RG93bkRhdGUoKTtcbiAgc2V0SW50ZXJ2YWwoY291bnREb3duRGF0ZSwgMTAwMCk7XG5cbn0pKClcblxuLy8gRk9PVEVSIFlFQVJcblxuY29uc3QgZm9vdGVyWWVhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb290ZXJfX3llYXInKVxuXG5jb25zdCBoYW5kbGVDdXJyZW50WWVhciA9ICgpID0+IHtcbiAgY29uc3QgeWVhciA9IChuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKTtcbiAgZm9vdGVyWWVhci5pbm5lclRleHQgPSB5ZWFyO1xufVxuXG5oYW5kbGVDdXJyZW50WWVhcigpOyJdfQ==
